import sys

sys.path.append("aima/")
import numpy as np
import math
import Case


class Grid:
    def __init__(self, grid):

        if type(grid) is str:
            self.grid = np.array(
                [[Case.Case(0, i, j) if int(grid[j + i]) == 0 else Case.Case(int(grid[i + j]), i, j, True)
                  for j in range(9)] for i in range(9)])
        elif type(grid) is np.ndarray:
            self.grid = grid
        else:
            raise ValueError

    def g_print(self):
        grid_value = [self.grid[x][y].get_val() for x in range(9) for y in range(9)]
        result = np.array(grid_value)
        result = result.reshape(9, 9)
        print(result)

    # Checking conflict for horizontal and vertical
    def check_line(self, num, x, y):

        # Getting values for h horizontal
        values = list()
        for i in range(9):
            values.append(self.grid[x][i].get_val())

        # Getting values for the vertical
        for j in range(9):
            values.append(self.grid[j][y].get_val())

        # Looking for duplicate
        if num in values:
            return 0
        else:
            return 1

    # Checking for conflict in a 3x3 square
    def check_square(self, num, x, y):

        if self.grid[x][y].get_val() != 0:
            return 0

        x_square = 3 * math.floor((x) / 3)
        y_square = 3 * math.floor((y) / 3)
        square_val = list()

        for i in range(x_square, x_square + 3):
            for j in range(y_square, y_square + 3):
                square_val.append(self.grid[i][j].get_val())

        if num in square_val:
            return 0
        else:
            return 1

    # Retourne le carre 3x3
    def get_square(self, row, col):
        x_square = math.floor((row) / 3)
        y_square = math.floor((col) / 3)

        sub_grid = self.grid[3 * x_square: 3 * x_square + 3]
        sub_grid = sub_grid[:, 3 * y_square: 3 * y_square + 3]
        return sub_grid

    # Retourne la liste des possibilites pour un case
    def eval_possibility(self, row, col):
        if self.grid[row][col].fixed:
            return []

        possible = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        sub_grid = self.get_square(row, col)

        sub_grid_val = [case.get_val() for i in range(0, 3) for case in sub_grid[i]]
        row_val = []
        for case in self.grid[row]:
            row_val += [case.get_val()]
        col_val = []
        for case in self.grid[:, col]:
            col_val += [case.get_val()]

        all_val = [sub_grid_val + row_val + col_val]

        for item in all_val:
            if item in possible:
                possible.remove(item)
        return possible

    def add_to_grid(self, num, row, col):
        new_grid = Grid(self.grid)
        if self.check_square(num, row, col) and self.check_line(num, row, col):
            new_grid.grid[row, col].set_val(num)
        return new_grid

    def count_zero(self):
        count = 0
        for x in self.grid:
            count += x.count(0)
        return count

        # Return the value of the object in the grid

    def case_val(self, x, y):
        case = self.grid[x][y]
        return case.get_val()

        # Set the value of a specific object

    def set_case(self, num, x, y):
        self.grid[x][y].set_val(num)

"""
#Verification de conflit sur ligne et colonne
    def check_line(self, num, row, col):
        if row not in range(0,9) or col not in range(0,9):
            #print("rows and column must be between 0 and 8")
            return 0
        if num not in range(1,10):
            #print("rows and column must be between 0 and 8")
            return 0

        for y in range(0,9):
            if num == self.grid[row][y]:
                #print("Rangee : {x},{y} contient deja {num}".format(x=row,y=y,num=num))
                return 0
        for x in range(0,9):
            if num == self.grid[x][col]:
                #print("Colonne : {x},{y} contient deja {num}".format(x=x, y=col, num=num))
                return 0
        return 1



    #Verification de conflit dans un carre 3x3
    def check_square(self, num, row, col):
        if row not in range(0,9) or col not in range(0,9):
            #print("rows and column must be between 1 and 9")
            return 0

        sub_grid = self.get_square(row,col)

        if num in sub_grid:
            #print("error num is in square")
            return 0
        return 1
"""
