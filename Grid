import sys

sys.path.append("aima/")
import numpy as np
import math
import Case
import random
import Sudoku

class Grid:
    def __init__(self, grid):

        if type(grid) is str:
            self.grid = np.array([[Case.Case(0, row, col) if int(grid[row * 9 + col]) == 0 else Case.Case(
                int(grid[row * 9 + col]), row, col, True)
                                   for col in range(9)] for row in range(9)])
        elif type(grid) is np.ndarray:
            self.grid = grid
        else:
            raise ValueError

    def g_print(self):
        grid_value = [self.grid[x][y].get_val() for x in range(9) for y in range(9)]
        result = np.array(grid_value)
        result = result.reshape(9, 9)
        return result

    # Checking conflict for horizontal and vertical
    def check_line(self, num, x, y):

        # Getting values for h horizontal
        values = list()
        for i in range(9):
            values.append(self.grid[x][i].get_val())

        # Getting values for the vertical
        for j in range(9):
            values.append(self.grid[j][y].get_val())

        # Looking for duplicate
        if num in values:
            return 0
        else:
            return 1

    # Checking for conflict in a 3x3 square
    def check_square(self, num, x, y):

        if self.grid[x][y].get_val() != 0:
            return 0

        x_square = 3 * math.floor((x) / 3)
        y_square = 3 * math.floor((y) / 3)
        square_val = list()

        for i in range(x_square, x_square + 3):
            for j in range(y_square, y_square + 3):
                square_val.append(self.grid[i][j].get_val())

        if num in square_val:
            return 0
        else:
            return 1

    # Retourne le carre 3x3
    def get_square(self, row, col):
        x_square = math.floor((row) / 3)
        y_square = math.floor((col) / 3)

        sub_grid = self.grid[3 * x_square: 3 * x_square + 3]
        sub_grid = sub_grid[:, 3 * y_square: 3 * y_square + 3]
        return sub_grid

    # Retourne la liste des possibilites pour un case
    def eval_possibility(self, row, col):
        if self.grid[row][col].fixed:
            return []
        possible = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        sub_grid = self.get_square(row, col)

        sub_grid_val = [case.get_val() for i in range(0, 3) for case in sub_grid[i]]
        row_val = []
        for case in self.grid[row]:
            row_val += [case.get_val()]
        col_val = []
        for case in self.grid[:, col]:
            col_val += [case.get_val()]

        all_val = sub_grid_val + row_val + col_val
        for item in all_val:
            if item in possible:
                possible.remove(item)
        return possible

    def add_to_grid(self, num, row, col):
        new_grid = Grid(self.grid)
        if self.check_square(num, row, col) and self.check_line(num, row, col):
            new_grid.grid[row, col].set_val(num)
        return new_grid

    def count_zero(self):
        count = 0
        for x in self.grid:
            count += x.count(0)
        return count

    # Return the value of the object in the grid
    def case_val(self, x, y):
        case = self.grid[x][y]
        return case.get_val()

    # Set the value of a specific object
    def set_case(self, num, x, y):
        self.grid[x][y].set_val(num)

    def to_string(self):
        grid_values = [str(self.grid[x][y].get_val()) for x in range(9) for y in range(9)]
        return "".join(grid_values)

#-------------------------------------------------- Hill Climbing-----------------------------------------------

    #Quelques fonctions utilisees pour le hill climbing
    # Count the number of conflict on a column
    def hc_check_col(self, y):
        base = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        values = list()
        for j in range(9):
            values.append(self.grid[j][y].get_val())
        values.sort()
        return len(list(set(base) - set(values)))

    # Count the number of conflict on a column
    def hc_check_row(self, x):
        base = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        values = list()
        for i in range(9):
            values.append(self.grid[x][i].get_val())
        values.sort()
        return len(list(set(base) - set(values)))

    # Count the number of conflict within the entire grid
    def scan_grid(self):
        total = 0
        for x in range(9):
            total += self.hc_check_row(x)
            total += self.hc_check_row(x)
        return total

    # Return a list of permutations for non-fixed case
    def get_permut(self):
        print("TARGET")
        print(self.grid[1][1].is_fixed())
        result = []
        base = [0, 1, 2, 3, 4, 5, 6, 7, 8]
        base1 = [0, 1, 2]
        base2 = [3, 4, 5]
        base3 = [6, 7, 8]
        z=1000
        while(z>0):

            z-=1
            i = random.choice(base)
            j = random.choice(base)
            if self.grid[i][j].is_fixed():
                continue
            #Finding the square of the cell
            x_square = math.floor(i/3)
            y_square = math.floor(j/3)

            #Choosing random cell within the same square
            if x_square == 0 :
                k = random.choice(base1)
            elif x_square == 1:
                k = random.choice(base2)
            else:
                k = random.choice(base3)

            if y_square == 0 :
                l = random.choice(base1)
            elif y_square == 1:
                l = random.choice(base2)
            else:
                l = random.choice(base3)

            if self.grid[k][l].is_fixed():
                continue

            if i==k and j == l :
                continue
            #The action 5434 switch the value of cell 5,4 with cell 3,4
            result.append(str(i) + str(j) + str(k) + str (l))
        print(len(result))
        return result

    def apply_permut(self, str):
        new_grid_str = self.to_string()
        str_list = list(new_grid_str)
        permutation = list(str)
        cell_1 = 9*int(permutation[0])+int(permutation[1])
        cell_2 = 9*int(permutation[2])+int(permutation[3])
        val_1 = str_list[cell_1]
        val_2 = str_list[cell_2]
        str_list[cell_1] = val_2
        str_list[cell_2] = val_1
        final = "".join(str_list)

        return Grid(final)
        # new_grid = Grid(self.grid)
        # print("2 : ", new_grid.g_print())
        #
        # permut = list(str)
        # cell_1 = new_grid.case_val(int(permut[0]), int(permut[1]))
        # cell_2 = new_grid.case_val(int(permut[2]), int(permut[3]))
        #
        # new_grid.set_case(cell_1, int(permut[2]), int(permut[3]))
        # new_grid.set_case(cell_2, int(permut[0]), int(permut[1]))
        #
        # print("3 : ", new_grid.g_print())
        # return new_grid

    def hc_fill_grid(self):
        new_grid = Grid(self.grid)
        base = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        #Looping on the 9 square
        for i in range(3):
            for j in range(3):
                # Getting missing values
                values = list()
                for x in range(3):
                    for y in range(3):
                        values.append(new_grid.case_val(i*3+x, j*3+y))
                possible = list(set(base) - set(values))
                random.shuffle(possible)
                #Filling the square
                for q in range(3):
                    for n in range(3):
                        if new_grid.case_val(i*3+q, j*3+n) == 0:
                            elem = possible.pop(0)
                            new_grid.set_case(elem, i*3+q, j*3+n)
        return new_grid


"""
#Verification de conflit sur ligne et colonne
    def check_line(self, num, row, col):
        if row not in range(0,9) or col not in range(0,9):
            #print("rows and column must be between 0 and 8")
            return 0
        if num not in range(1,10):
            #print("rows and column must be between 0 and 8")
            return 0

        for y in range(0,9):
            if num == self.grid[row][y]:
                #print("Rangee : {x},{y} contient deja {num}".format(x=row,y=y,num=num))
                return 0
        for x in range(0,9):
            if num == self.grid[x][col]:
                #print("Colonne : {x},{y} contient deja {num}".format(x=x, y=col, num=num))
                return 0
        return 1



    #Verification de conflit dans un carre 3x3
    def check_square(self, num, row, col):
        if row not in range(0,9) or col not in range(0,9):
            #print("rows and column must be between 1 and 9")
            return 0

        sub_grid = self.get_square(row,col)

        if num in sub_grid:
            #print("error num is in square")
            return 0
        return 1
"""
