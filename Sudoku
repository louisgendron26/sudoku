import sys
sys.path.append('aima/')
from aima.search import *
import Grid

class Sudoku(Problem):

    """The abstract class for a formal problem.  You should subclass
    this and implement the methods actions and result, and possibly
    __init__, goal_test, and path_cost. Then you will create instances
    of your subclass and solve them with the various search functions."""

    def __init__(self, initial, goal=None):
        """The constructor specifies the initial state, and possibly a goal
        state, if there is a unique goal.  Your subclass's constructor can add
        other arguments."""
        self.initial = Grid.Grid(initial, fixing=initial)
        self.goal = goal

    def actions(self, state, hc=False):
        #if hc is True, the result is a list of permutations
        #if hc is False, the result is a list of potential value that can be assign to empty case
        result = []
        if hc:
            return state.get_permut()
        else:
            for x in range(0, 9):
                for y in range(0, 9):
                    pos = state.eval_possibility(x, y)
                    if len(pos) >= 1:
                        for z in pos:
                            action = str(z) + str(x) + str(y)
                            result.append(action)
            return result

    def result(self, state, action, hc=False):
        """Return the state that results from executing the given
        action in the given state. The action must be one of
        self.actions(state)."""
        if hc:
            next_state = state.apply_permut(action)
        else:
            next_state = state.add_to_grid(int(action[0]), int(action[1]), int(action[2]))
        return next_state

    def goal_test(self, state):

        goal = True
        print(state.grid)
        for x in range (0,9):
            for y in range (0,9):
                if state.grid[x][y] == 0:
                    goal = False
                    break
                if ((not state.check_line(state.grid[x][y],x,y)) or (not state.check_square(state.grid[x][y],x,y))):
                    goal = False
                    break
        return goal
    def path_cost(self, c, state1, action, state2):
        return c + 1

    def value(self, state):
        return state.scan_grid()

